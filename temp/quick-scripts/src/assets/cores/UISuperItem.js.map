{"version":3,"sources":["assets/cores/UISuperItem.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/*\n * @Author: steveJobs\n * @Email: icipiqkm@gmail.com\n * @Date: 2020-11-19 01:15:38\n * @Last Modified by: steveJobs\n * @Last Modified time: 2020-12-04 14:41:01\n * @Description: Description\n */\nimport UISuperLayout, { UIChangeBrotherEvnet } from './UISuperLayout';\nconst { ccclass, property } = cc._decorator;\n@ccclass\nexport default class UISpuerItem extends cc.Component {\n    private layout: UISuperLayout\n    private brother: cc.Node\n    private originSize: cc.Size\n    private originScale: cc.Vec2\n    /** 根据可视范围 和 一组item的个数 去掉 边距/间隔 来计算本item的真实宽度 */\n    private get width() {\n        if (this.layout.vertical) {\n            // 垂直滑动时 固定宽度\n            return (this.layout.accommodWidth - this.layout.spacingWidth) / this.layout.column\n        } else {\n            // 水平模式时 宽度随意\n            return this.node.width * this.layout.getUsedScaleValue(this.node.scaleX)\n        }\n    }\n    /** 根据可视范围 和 一组item的个数 去掉 边距/间隔 来计算本item的真实高度 */\n    private get height() {\n        if (this.layout.horizontal) {\n            // 水平模式时 固定高度\n            return (this.layout.accommodHeight - this.layout.spacingWidth) / this.layout.column\n        } else {\n            // 垂直滑动时 高度随意\n            return this.node.height * this.layout.getUsedScaleValue(this.node.scaleY)\n        }\n    }\n    onLoad() {\n        // 向node写入一个方法 省去了先获取组件然后调用的步骤\n        this.node['watchSelf'] = this.watchSelf.bind(this)\n        this.node['saveOriginSize'] = this.saveOriginSize.bind(this)\n        let widget = this.node.getComponent(cc.Widget)\n        if (widget) {\n            cc.warn(\"UISuperItem: item不允许挂cc.Widget组件 请手动移除\")\n            this.node.removeComponent(widget)\n        } \n    }\n    public saveOriginSize() {\n        this.originSize = cc.size(this.width, this.height)\n        this.node.setContentSize(this.originSize)\n        this.originScale = cc.v2(this.node.scaleX, this.node.scaleY)\n    }\n    public init(layout: UISuperLayout) {\n        this.layout = layout\n        this.layout.node.on(UIChangeBrotherEvnet, this.onChangeBrother, this)\n        this.saveOriginSize()\n        this.node.on(cc.Node.EventType.SIZE_CHANGED, this.watchSize, this)\n        this.node.on(cc.Node.EventType.SCALE_CHANGED, this.watchSize, this)\n        this.onChangeBrother()\n    }\n    onDestroy() {\n        this.layout.node.off(UIChangeBrotherEvnet, this.onChangeBrother, this)\n        this.node.off(cc.Node.EventType.SIZE_CHANGED, this.watchSize, this)\n        this.node.off(cc.Node.EventType.SCALE_CHANGED, this.watchSize, this)\n        this.unlisten()\n    }\n    /**\n     * 当兄弟节点的顺序变化时 来改变自己监听的对象\n     * 0,1,2,3,4,5,6,7,8,9 例如列表中共有10个item 0是header 9是footer \n     * 正序排列时 监听的顺序是 9->8->7->6->5->4->3->2->1->0 0的 brother=null \n     * 向下填充的逻辑是 0跑到9后面 0=footer 0的brother=9 相对9的位置设置自己 此时1=header \n     * 向上填充的逻辑是 9跑到0前面 此时9=header 9的brother=null 主动设置自己相对于0前面位置之后 0的brother=9 8=footer\n     */\n    private onChangeBrother() {\n        let _brother = this.layout.getBrotherNode(this.node) //获取我应该监听的那个兄弟\n        if (_brother?.uuid == this.brother?.uuid) return //如果没有变化 则跳过\n        this.unlisten() //我的兄弟换人了？先移除我原来的\n        this.brother = _brother //他是我的兄弟\n        this.listen() //监听他\n        this.watchBrother() //相对兄弟节点来设置自己的位置\n    }\n    private listen() {\n        this.brother?.on('leave', this.unlisten, this)\n        this.brother?.on(cc.Node.EventType.POSITION_CHANGED, this.watchBrother, this)\n    }\n    private unlisten() {\n        this.brother?.off('leave', this.unlisten, this)\n        this.brother?.off(cc.Node.EventType.POSITION_CHANGED, this.watchBrother, this)\n        this.brother = null\n    }\n    /** 当我的尺寸/缩放改变时 */\n    private watchSize() {\n        if (this.layout.column > 1) { //如果是Grid模式 不允许修改尺寸/缩放 强制改回来\n            this.node.setContentSize(this.originSize)\n            this.node.setScale(this.originScale)\n        } else {\n            if (this.layout.vertical && (this.node.getContentSize().width != this.originSize.width || this.node.scaleX != this.originScale.x)) {\n                cc.warn(\"垂直排列不允许修改【宽度】\")\n                this.node.width = this.originSize.width\n                this.node.scaleX = this.originScale.x\n\n            } else if (this.layout.horizontal && (this.node.getContentSize().height != this.originSize.height || this.node.scaleY != this.originScale.y)) {\n                cc.warn(\"水平排列不允许修改【高度】\")\n                this.node.height = this.originSize.height\n                this.node.scaleY = this.originScale.y\n            }\n            // 如果我监听了兄弟节点就设置自己相对兄弟节点的位置，否则 我就发送一个位置变化的消息 让监听我的兄弟相对我做出变化\n            this.brother && this.watchBrother()\n            this.layout.resetScrollView()\n            this.node.emit(cc.Node.EventType.POSITION_CHANGED)\n        }\n        if (this.node['index'] == 0 && this.layout.isNormalSize) {\n            this.node.setPosition(this.layout.getGroupHeader(this.node))\n        }\n    }\n    // 设置自己相对于上一个兄弟节点的位置\n    public watchBrother() {\n        if (!this.brother) return\n        if (this.layout.headerToFooter) { //正序排列时\n            this.headerToFooterRelativeToFooter(this.brother)\n        } else {//倒序排列时\n            this.footerToHeaderRelativeToFooter(this.brother)\n        }\n    }\n    private isOutOfBoundary(offset: cc.Vec2) {\n        if (this.layout.vertical && offset.y == 0) return true\n        if (this.layout.horizontal && offset.x == 0) return true\n        return false\n    }\n    /** 从下到上排序方向 检查头部是否需要向上填充 */\n    private footerToHeaderWatchHeader() {\n        // 如果不是头部一组的任意一个时跳过 比如一组有3个item 只计算 0，1，2 \n        if (this.layout.getSiblingIndex(this.node) >= this.layout.column) return\n        // 如果此时【尾部】已经是最后一个数据时\n        let index = this.layout.footer['index'] + 1\n        if (index >= this.layout.maxItemTotal) {\n            if (!this.layout.footerLoop || this.layout.scrollToHeaderOrFooter) return\n            index = 0\n        }\n        // 计算超出的偏移量 (从下到上排序方向时 头部在 下尾部在上 检测【头部】是否超出下边框)\n        let offset = this.layout.isOutOfBoundaryFooter(this.node)\n        // 没有超出时跳过\n        if (!this.isOutOfBoundary(offset)) return\n        // 将自己的数据索引 + 1\n        this.node['index'] = index\n        // 发送通知到应用层 刷新显示\n        this.layout.notifyRefreshItem(this.node)\n        // 发给监听我的节点 通知我离开了 移除对我的所有监听\n        this.node.emit(\"leave\")\n        // 将自己的节点索引设置到尾部\n        this.layout.setSiblingIndex(this.node, this.layout.children.length - 1)\n    }\n    /** 从下到上排序方向 检查尾部是否需要向下填充 */\n    private footerToHeaderWatchFooter() {\n        // 如果不是尾部一组的任意一个时跳过 比如一组有3个item 只计算末尾的3个item \n        if (this.layout.getSiblingIndex(this.node) < this.layout.children.length - this.layout.column) return\n        // 如果此时【头部】已经是第一个数据时\n        let index = this.layout.header['index'] - 1\n        if (index < 0) {\n            // 如果没有使用无限循环功能 否则不往下走\n            if (!this.layout.headerLoop || this.layout.scrollToHeaderOrFooter) return\n            index = this.node['index']\n        }\n        // 计算超出的偏移量 (从下到上排序方向时 头部在 下尾部在上 检测【尾部】是否超出下边框)\n        let offset = this.layout.isOutOfBoundaryHeader(this.node)\n        // 没有超出时跳过\n        if (!this.isOutOfBoundary(offset)) return\n        // 将自己的数据索引 - 1\n        this.node['index'] = index\n        // 发送通知到应用层 刷新显示\n        this.layout.notifyRefreshItem(this.node)\n        // 发给监听我的兄弟 通知我离开了 移除对我的所有监听\n        this.node.emit(\"leave\")\n        // 因为我是尾部 我监听了别人，此时移除我的所有监听 因为我马上就要成为老大 老大不需要监听任何人\n        this.unlisten()\n        // 因为我是老大 我不能相对别人来设置自己的相对位置，所以\b我需要主动设置自己(相对上一个老大的位置来设置自己) 别人都会相对我的位置做出变化\n        this.footerToHeaderRelativeToHeader(this.layout.header)\n        // 将自己的节点索引设置到头部\n        this.layout.setSiblingIndex(this.node, 0)\n    }\n    /** 从上到下排序方向 检查头部是否需要向下填充 */\n    private headerToFooterWatchHeader() {\n        // 如果不是头部一组的任意一个时跳过 比如一组有3个item 只计算 0，1，2 \n        if (this.layout.getSiblingIndex(this.node) >= this.layout.column) return\n        // 如果此时【尾部】已经是第一个数据时  \n        let index = this.layout.footer['index'] + 1\n        if (index > this.layout.maxItemTotal - 1) {\n            // 如果没有使用无限循环功能 否则不往下走\n            if (!this.layout.footerLoop || this.layout.scrollToHeaderOrFooter) return\n            index = 0\n        }\n        // 计算超出的偏移量 (从下到上排序方向时 头部在下 尾部在上 检测【尾部】是否超出下边框)\n        let offset = this.layout.isOutOfBoundaryHeader(this.node)\n        // 没有超出时跳过\n        if (!this.isOutOfBoundary(offset)) return\n        // 将自己的数据索引 + 1\n        this.node['index'] = index\n        // 发送通知到应用层 刷新显示\n        this.layout.notifyRefreshItem(this.node)\n        // 发给监听我的兄弟 通知我离开了 移除对我的所有监听\n        this.node.emit(\"leave\")\n        // 将自己的节点索引设置到尾部\n        this.layout.setSiblingIndex(this.node, this.layout.children.length - 1)\n    }\n    /** 从上到下排序方向 检查尾部是否需要向上填充 */\n    private headerToFooterWatchFooter() {\n        // 如果不是尾部一组的任意一个时跳过 比如一组有3个item 只计算末尾的3个item \n        if (this.layout.getSiblingIndex(this.node) < this.layout.children.length - this.layout.column) return\n        // 如果此时【头部】已经是第一个数据时 \n        let index = this.layout.header['index'] - 1\n        if (index < 0) {\n            // 如果没有使用无限循环功能 否则不往下走\n            if (!this.layout.headerLoop || this.layout.scrollToHeaderOrFooter) return\n            index = this.node['index']\n        }\n        // 计算超出的偏移量 (从上到下排序方向时 头部在上 尾部在下 检测【尾部】是否超出下边框)\n        let offset = this.layout.isOutOfBoundaryFooter(this.node)\n        // 没有超出时跳过\n        if (!this.isOutOfBoundary(offset)) return\n        // 将自己的数据索引 - 1\n        this.node['index'] = index\n        // 发送通知到应用层 刷新显示\n        this.layout.notifyRefreshItem(this.node)\n        // 发给监听我的兄弟 通知我离开了 移除对我的所有监听\n        this.node.emit(\"leave\")\n        // 因为我是尾部 我监听了别人，此时移除我的所有监听 因为我马上就要成为老大 老大不需要监听任何人\n        this.unlisten()\n        // 因为我是老大 我不能相对别人来设置自己的相对位置，所以\b我需要主动设置自己(相对上一个老大的位置来设置自己) 别人都会相对我的位置做出变化\n        this.headerToFooterRelativeToHeader(this.layout.header)\n        // 将自己的节点索引设置到尾部\n        this.layout.setSiblingIndex(this.node, 0)\n    }\n    /** isScrollToFooter=true 向下滑动 */\n    public watchSelf(isScrollToFooter: boolean) {\n        if (isScrollToFooter) {\n            if (this.layout.headerToFooter) {\n                // 从【上到下排序】方向 检查【尾部】是否需要向上填充\n                this.headerToFooterWatchFooter()\n            } else {\n                // 从【下到上排序】方向 检查【头部】是否需要向上填充\n                this.footerToHeaderWatchHeader()\n            }\n        } else {\n            if (this.layout.headerToFooter) {\n                // 从【上到下排序】方向 检查【头部】是否需要向下填充\n                this.headerToFooterWatchHeader()\n            } else {\n                // 从【下到上排序】方向 检查【尾部】是否需要向下填充\n                this.footerToHeaderWatchFooter()\n            }\n        }\n    }\n    /** 从下到上 从右到左 排序方向  设置自己到相对node的头部 */\n    private footerToHeaderRelativeToHeader(relative: cc.Node) {\n        let pos = this.node.getPosition()\n        // 从下到上\n        if (this.layout.vertical) {\n            if (this.layout.isGroupHeader(relative)) {\n                pos.x = this.layout.getGroupFooter(this.node).x\n                pos.y = this.layout.getGroupBottomY(this.node, relative)\n            } else {\n                pos.x = this.layout.getGroupLeftX(this.node, relative)\n                pos.y = relative.y\n            }\n            if (this.node['index'] == 0) {\n                pos.x = this.layout.getGroupHeader(this.node).x\n            }\n        } else {\n            // 从右到左\n            if (this.layout.isGroupHeader(relative)) {\n                pos.x = this.layout.getGroupRightX(this.node, relative)\n                pos.y = this.layout.getGroupFooter(this.node).y\n            } else {\n                pos.x = relative.x\n                pos.y = this.layout.getGroupTopY(this.node, relative)\n            }\n            if (this.node['index'] == 0) {\n                pos.y = this.layout.getGroupHeader(this.node).y\n            }\n        }\n        this.node.setPosition(pos)\n    }\n    /** 从下到上 从右到左 排序方向 设置自己到相对node的尾部 */\n    private footerToHeaderRelativeToFooter(relative: cc.Node) {\n        let pos = this.node.getPosition()\n        // 从下到上\n        if (this.layout.vertical) {\n            if (this.layout.isGroupFooter(relative)) {\n                pos.x = this.layout.getGroupHeader(this.node).x\n                pos.y = this.layout.getGroupTopY(this.node, relative)\n            } else {\n                pos.x = this.layout.getGroupRightX(this.node, relative)\n                pos.y = relative.y\n            }\n        } else {\n            // 从右到左\n            if (this.layout.isGroupFooter(relative)) {\n                pos.x = this.layout.getGroupLeftX(this.node, relative)\n                pos.y = this.layout.getGroupHeader(this.node).y\n            } else {\n                pos.x = relative.x\n                pos.y = this.layout.getGroupBottomY(this.node, relative)\n            }\n        }\n        this.node.setPosition(pos)\n    }\n    /** 从上到下 从左到右 排序方向 设置自己到相对node的头部 */\n    private headerToFooterRelativeToHeader(relative: cc.Node) {\n        let pos = this.node.getPosition()\n        // 从上到下\n        if (this.layout.vertical) {\n            if (this.layout.isGroupHeader(relative)) {\n                pos.x = this.layout.getGroupFooter(this.node).x\n                pos.y = this.layout.getGroupTopY(this.node, relative)\n            } else {\n                pos.x = this.layout.getGroupLeftX(this.node, relative)\n                pos.y = relative.y\n            }\n            if (this.node['index'] == 0) {\n                pos.x = this.layout.getGroupHeader(this.node).x\n            }\n        } else {\n            // 从左到右\n            if (this.layout.isGroupHeader(relative)) {\n                pos.x = this.layout.getGroupLeftX(this.node, relative)\n                pos.y = this.layout.getGroupFooter(this.node).y\n            } else {\n                pos.x = relative.x\n                pos.y = this.layout.getGroupTopY(this.node, relative)\n            }\n            if (this.node['index'] == 0) {\n                pos.y = this.layout.getGroupHeader(this.node).y\n            }\n        }\n        this.node.setPosition(pos)\n    }\n    /** 从上到下 从左到右 排序方向 设置自己到相对node尾部 */\n    private headerToFooterRelativeToFooter(relative: cc.Node) {\n        let pos = this.node.getPosition()\n        // 从上到下\n        if (this.layout.vertical) {\n            if (this.layout.isGroupFooter(relative)) {\n                pos.x = this.layout.getGroupHeader(this.node).x\n                pos.y = this.layout.getGroupBottomY(this.node, relative)\n            } else {\n                pos.x = this.layout.getGroupRightX(this.node, relative)\n                pos.y = relative.y\n            }\n        } else {\n            // 从左到右\n            if (this.layout.isGroupFooter(relative)) {\n                pos.x = this.layout.getGroupRightX(this.node, relative)\n                pos.y = this.layout.getGroupHeader(this.node).y\n            } else {\n                pos.x = relative.x\n                pos.y = this.layout.getGroupBottomY(this.node, relative)\n            }\n        }\n        this.node.setPosition(pos)\n    }\n}\n"]}